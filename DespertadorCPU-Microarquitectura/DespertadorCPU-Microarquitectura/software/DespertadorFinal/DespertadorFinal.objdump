
DespertadorFinal.elf:     file format elf32-littlenios2
DespertadorFinal.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000a14 memsz 0x00000a14 flags r-x
    LOAD off    0x00001a34 vaddr 0x00001a34 paddr 0x00001a6c align 2**12
         filesz 0x00000038 memsz 0x00000038 flags rw-
    LOAD off    0x00001aa4 vaddr 0x00001aa4 paddr 0x00001aa4 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000008a8  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00001a28  00001a28  00001a28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000038  00001a34  00001a6c  00001a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00001aa4  00001aa4  00001aa4  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00001bbc  00001bbc  00001a6c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000298  00000000  00000000  00001a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001d67  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ebe  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d8a  00000000  00000000  0000494d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000388  00000000  00000000  000056d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f76  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b32  00000000  00000000  000069d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00007508  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00007518  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000895a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000895d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008960  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008961  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00008962  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000896d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00008978  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00008983  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005a  00000000  00000000  00008991  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c26  00000000  00000000  000089eb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006d894  00000000  00000000  0000d611  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
00001a28 l    d  .rodata	00000000 .rodata
00001a34 l    d  .rwdata	00000000 .rwdata
00001aa4 l    d  .bss	00000000 .bss
00001bbc l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DespertadorFinal_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000011bc l     F .text	0000000c timer_isr
00001a28 l     O .rodata	0000000a CSWTCH.26
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001ab8 g     O .bss	00000004 alt_instruction_exception_handler
000018cc g     F .text	0000002c alt_main
00001abc g     O .bss	00000100 alt_irq
00001a6c g       *ABS*	00000000 __flash_rwdata_start
00001420 g     F .text	00000024 cambiar_numero
000018f8 g     F .text	00000038 alt_putstr
00001a04 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001aa6 g     O .bss	00000002 hora
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001ab0 g     O .bss	00000004 alt_argv
00009a34 g       *ABS*	00000000 _gp
00001a36 g     O .rwdata	00000002 ultimo_estado_btnmin
00001990 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00001a60 g     O .rwdata	00000004 hora1
00001a48 g     O .rwdata	00000004 btnapagar
00001a58 g     O .rwdata	00000004 min1
0000163c g     F .text	00000064 .hidden __udivsi3
00001bbc g       *ABS*	00000000 __bss_end
00001784 g     F .text	00000068 alt_iic_isr_register
0000176c g     F .text	00000018 alt_ic_irq_enabled
00001aa8 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
00001988 g     F .text	00000004 alt_dcache_flush_all
00001a6c g       *ABS*	00000000 __ram_rwdata_end
00001a34 g       *ABS*	00000000 __ram_rodata_end
00001a68 g     O .rwdata	00000004 jtag_uart_0
000016a0 g     F .text	00000058 .hidden __umodsi3
00001a40 g     O .rwdata	00000004 buzzer
00001bbc g       *ABS*	00000000 end
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001954 g     F .text	00000034 altera_avalon_jtag_uart_write
00001444 g     F .text	0000003c init_timer_interrupt
00001180 g     F .text	0000003c _start
00001a5c g     O .rwdata	00000004 hora2
00001950 g     F .text	00000004 alt_sys_init
00001318 g     F .text	00000070 inicio_reloj
00001a4c g     O .rwdata	00000004 btnmin
00001a34 g       *ABS*	00000000 __ram_rwdata_start
00001a28 g       *ABS*	00000000 __ram_rodata_start
00001a54 g     O .rwdata	00000004 min2
00001bbc g       *ABS*	00000000 __alt_stack_base
000011c8 g     F .text	00000150 actualizar_datos
00001aa4 g       *ABS*	00000000 __bss_start
00001388 g     F .text	00000098 sumar_dato
00001480 g     F .text	000000c4 main
00001aac g     O .bss	00000004 alt_envp
00001544 g     F .text	00000084 .hidden __divsi3
00001a28 g       *ABS*	00000000 __flash_rodata_start
00001a3c g     O .rwdata	00000004 swinicio
00001aa4 g     O .bss	00000002 min
00001930 g     F .text	00000020 alt_irq_init
00001ab4 g     O .bss	00000004 alt_argc
00001020 g       .exceptions	00000000 alt_irq_entry
00001a34 g     O .rwdata	00000002 ultimo_estado_swinicio
00001020 g       *ABS*	00000000 __ram_exceptions_start
000016f8 g     F .text	00000004 alt_ic_isr_register
00001a6c g       *ABS*	00000000 _edata
00001bbc g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00001734 g     F .text	00000038 alt_ic_irq_disable
00001000 g       *ABS*	00000000 __alt_mem_memory
00001a50 g     O .rwdata	00000004 btnhora
000015c8 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
00001a44 g     O .rwdata	00000004 swmodo
0000100c g       .entry	00000000 _exit
00001a38 g     O .rwdata	00000002 ultimo_estado_btnhora
00001a0c g     F .text	0000001c strlen
0000198c g     F .text	00000004 alt_icache_flush_all
00001a64 g     O .rwdata	00000004 alt_priority_mask
000016fc g     F .text	00000038 alt_ic_irq_enable
000017ec g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	8406af04 	addi	r16,r16,6844

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff76e0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff76e8>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a02117 	ldw	r2,-32636(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a68d14 	ori	gp,gp,39476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	1086a914 	ori	r2,r2,6820

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c6ef14 	ori	r3,r3,7100

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff7770>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00017ec0 	call	17ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00018cc0 	call	18cc <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7784>

000011bc <timer_isr>:


static void timer_isr(void * context, alt_u32 id){
	int seg = 0;

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
    11bc:	008c0004 	movi	r2,12288
    11c0:	10000035 	stwio	zero,0(r2)
    11c4:	f800283a 	ret

000011c8 <actualizar_datos>:
	}
	alt_putstr('TERMINO LA OSTIA');

}

void actualizar_datos(){
    11c8:	defffa04 	addi	sp,sp,-24
    11cc:	dcc00315 	stw	r19,12(sp)
	unsigned short decenas_horas = (hora/10)%10;
	unsigned short unidades_horas = hora % 10;
    11d0:	d4e01c8f 	ldh	r19,-32654(gp)
    11d4:	01400284 	movi	r5,10
	}
	alt_putstr('TERMINO LA OSTIA');

}

void actualizar_datos(){
    11d8:	dfc00515 	stw	ra,20(sp)
	unsigned short decenas_horas = (hora/10)%10;
	unsigned short unidades_horas = hora % 10;
    11dc:	9809883a 	mov	r4,r19
	}
	alt_putstr('TERMINO LA OSTIA');

}

void actualizar_datos(){
    11e0:	dd000415 	stw	r20,16(sp)
    11e4:	dc800215 	stw	r18,8(sp)
    11e8:	dc400115 	stw	r17,4(sp)
    11ec:	dc000015 	stw	r16,0(sp)
	unsigned short decenas_horas = (hora/10)%10;
	unsigned short unidades_horas = hora % 10;
    11f0:	00015c80 	call	15c8 <__modsi3>
	unsigned short decenas_min = (min/10)%10;
    11f4:	d4201c0f 	ldh	r16,-32656(gp)
    11f8:	01400284 	movi	r5,10

}

void actualizar_datos(){
	unsigned short decenas_horas = (hora/10)%10;
	unsigned short unidades_horas = hora % 10;
    11fc:	1025883a 	mov	r18,r2
	unsigned short decenas_min = (min/10)%10;
    1200:	8009883a 	mov	r4,r16
    1204:	00015440 	call	1544 <__divsi3>
    1208:	113fffcc 	andi	r4,r2,65535
    120c:	2120001c 	xori	r4,r4,32768
    1210:	01400284 	movi	r5,10
    1214:	21200004 	addi	r4,r4,-32768
    1218:	00015c80 	call	15c8 <__modsi3>
	unsigned short unidades_min = min % 10;
    121c:	8009883a 	mov	r4,r16
    1220:	01400284 	movi	r5,10
}

void actualizar_datos(){
	unsigned short decenas_horas = (hora/10)%10;
	unsigned short unidades_horas = hora % 10;
	unsigned short decenas_min = (min/10)%10;
    1224:	1023883a 	mov	r17,r2
	unsigned short unidades_min = min % 10;
    1228:	00015c80 	call	15c8 <__modsi3>
    122c:	01400284 	movi	r5,10
    1230:	9809883a 	mov	r4,r19
    1234:	1021883a 	mov	r16,r2
    1238:	00015440 	call	1544 <__divsi3>
    123c:	113fffcc 	andi	r4,r2,65535
    1240:	2120001c 	xori	r4,r4,32768
    1244:	01400284 	movi	r5,10
    1248:	21200004 	addi	r4,r4,-32768
    124c:	00015c80 	call	15c8 <__modsi3>
    1250:	10bfffcc 	andi	r2,r2,65535
    1254:	00c00244 	movi	r3,9

	*hora1 = cambiar_numero(decenas_horas);
    1258:	d5200b17 	ldw	r20,-32724(gp)
    125c:	18800536 	bltu	r3,r2,1274 <actualizar_datos+0xac>
    1260:	01000034 	movhi	r4,0
    1264:	21068a04 	addi	r4,r4,6696
    1268:	2085883a 	add	r2,r4,r2
    126c:	10800007 	ldb	r2,0(r2)
    1270:	00000106 	br	1278 <actualizar_datos+0xb0>
    1274:	0005883a 	mov	r2,zero
    1278:	a080000d 	sth	r2,0(r20)
    127c:	90bfffcc 	andi	r2,r18,65535
	*hora2 = cambiar_numero(unidades_horas);
    1280:	d1200a17 	ldw	r4,-32728(gp)
    1284:	18800536 	bltu	r3,r2,129c <actualizar_datos+0xd4>
    1288:	00c00034 	movhi	r3,0
    128c:	18c68a04 	addi	r3,r3,6696
    1290:	1885883a 	add	r2,r3,r2
    1294:	10800007 	ldb	r2,0(r2)
    1298:	00000106 	br	12a0 <actualizar_datos+0xd8>
    129c:	0005883a 	mov	r2,zero
    12a0:	2080000d 	sth	r2,0(r4)
    12a4:	00c00244 	movi	r3,9
    12a8:	88bfffcc 	andi	r2,r17,65535
	*min1 = cambiar_numero(decenas_min);
    12ac:	d1200917 	ldw	r4,-32732(gp)
    12b0:	18800536 	bltu	r3,r2,12c8 <actualizar_datos+0x100>
    12b4:	01400034 	movhi	r5,0
    12b8:	29468a04 	addi	r5,r5,6696
    12bc:	2885883a 	add	r2,r5,r2
    12c0:	10800007 	ldb	r2,0(r2)
    12c4:	00000106 	br	12cc <actualizar_datos+0x104>
    12c8:	0005883a 	mov	r2,zero
    12cc:	2080000d 	sth	r2,0(r4)
    12d0:	80bfffcc 	andi	r2,r16,65535
	*min2 = cambiar_numero(unidades_min);
    12d4:	d1200817 	ldw	r4,-32736(gp)
    12d8:	18800536 	bltu	r3,r2,12f0 <actualizar_datos+0x128>
    12dc:	00c00034 	movhi	r3,0
    12e0:	18c68a04 	addi	r3,r3,6696
    12e4:	1885883a 	add	r2,r3,r2
    12e8:	10800007 	ldb	r2,0(r2)
    12ec:	00000106 	br	12f4 <actualizar_datos+0x12c>
    12f0:	0005883a 	mov	r2,zero
    12f4:	2080000d 	sth	r2,0(r4)
}
    12f8:	dfc00517 	ldw	ra,20(sp)
    12fc:	dd000417 	ldw	r20,16(sp)
    1300:	dcc00317 	ldw	r19,12(sp)
    1304:	dc800217 	ldw	r18,8(sp)
    1308:	dc400117 	ldw	r17,4(sp)
    130c:	dc000017 	ldw	r16,0(sp)
    1310:	dec00604 	addi	sp,sp,24
    1314:	f800283a 	ret

00001318 <inicio_reloj>:
		ultimo_estado_swinicio = estado_actual_swinicio;
	}
	return 0;
}

void inicio_reloj(){
    1318:	defffe04 	addi	sp,sp,-8
    131c:	dc000015 	stw	r16,0(sp)
    1320:	dfc00115 	stw	ra,4(sp)

	while(1){
		if(min==0){
			if(hora>0){
				hora--;
				min = 59;
    1324:	04000ec4 	movi	r16,59
}

void inicio_reloj(){

	while(1){
		if(min==0){
    1328:	d0a01c0b 	ldhu	r2,-32656(gp)
    132c:	10ffffcc 	andi	r3,r2,65535
    1330:	18e0001c 	xori	r3,r3,32768
    1334:	18e00004 	addi	r3,r3,-32768
    1338:	1800091e 	bne	r3,zero,1360 <inicio_reloj+0x48>
			if(hora>0){
    133c:	d0a01c8b 	ldhu	r2,-32654(gp)
    1340:	10ffffcc 	andi	r3,r2,65535
    1344:	18e0001c 	xori	r3,r3,32768
    1348:	18e00004 	addi	r3,r3,-32768
    134c:	00c0080e 	bge	zero,r3,1370 <inicio_reloj+0x58>
				hora--;
    1350:	10bfffc4 	addi	r2,r2,-1
    1354:	d0a01c8d 	sth	r2,-32654(gp)
				min = 59;
    1358:	d4201c0d 	sth	r16,-32656(gp)
    135c:	00000206 	br	1368 <inicio_reloj+0x50>
			else{
				break;
			}
		}
		else{
			min--;
    1360:	10bfffc4 	addi	r2,r2,-1
    1364:	d0a01c0d 	sth	r2,-32656(gp)
		}
		actualizar_datos();
    1368:	00011c80 	call	11c8 <actualizar_datos>
	}
    136c:	003fee06 	br	1328 <_gp+0xffff78f4>
	alt_putstr('TERMINO LA OSTIA');
    1370:	0114d534 	movhi	r4,21332
    1374:	21125044 	addi	r4,r4,18753

}
    1378:	dfc00117 	ldw	ra,4(sp)
    137c:	dc000017 	ldw	r16,0(sp)
    1380:	dec00204 	addi	sp,sp,8
		else{
			min--;
		}
		actualizar_datos();
	}
	alt_putstr('TERMINO LA OSTIA');
    1384:	00018f81 	jmpi	18f8 <alt_putstr>

00001388 <sumar_dato>:
	*hora2 = cambiar_numero(unidades_horas);
	*min1 = cambiar_numero(decenas_min);
	*min2 = cambiar_numero(unidades_min);
}

void sumar_dato(unsigned short *valor, volatile unsigned short *dato1, volatile unsigned short *dato2){
    1388:	defffb04 	addi	sp,sp,-20
    138c:	dc000015 	stw	r16,0(sp)
	if(*valor <= 59){
    1390:	2400000b 	ldhu	r16,0(r4)
	*hora2 = cambiar_numero(unidades_horas);
	*min1 = cambiar_numero(decenas_min);
	*min2 = cambiar_numero(unidades_min);
}

void sumar_dato(unsigned short *valor, volatile unsigned short *dato1, volatile unsigned short *dato2){
    1394:	dfc00415 	stw	ra,16(sp)
    1398:	dcc00315 	stw	r19,12(sp)
    139c:	dc800215 	stw	r18,8(sp)
    13a0:	dc400115 	stw	r17,4(sp)
	if(*valor <= 59){
    13a4:	80bfffcc 	andi	r2,r16,65535
    13a8:	00c00ec4 	movi	r3,59
    13ac:	18801536 	bltu	r3,r2,1404 <sumar_dato+0x7c>
		(*valor)++;
    13b0:	84000044 	addi	r16,r16,1
    13b4:	2400000d 	sth	r16,0(r4)
    13b8:	843fffcc 	andi	r16,r16,65535
    13bc:	2825883a 	mov	r18,r5
    13c0:	8009883a 	mov	r4,r16
    13c4:	01400284 	movi	r5,10
    13c8:	3023883a 	mov	r17,r6
    13cc:	04c00034 	movhi	r19,0
    13d0:	000163c0 	call	163c <__udivsi3>
    13d4:	9cc68a04 	addi	r19,r19,6696
    13d8:	10bfffcc 	andi	r2,r2,65535
    13dc:	9885883a 	add	r2,r19,r2
		unsigned short decenas = (*valor/10)%10;
		unsigned short unidades = *valor % 10;
		*dato1 = cambiar_numero(decenas);
    13e0:	10800007 	ldb	r2,0(r2)
    13e4:	01400284 	movi	r5,10
    13e8:	8009883a 	mov	r4,r16
    13ec:	9080000d 	sth	r2,0(r18)
    13f0:	00016a00 	call	16a0 <__umodsi3>
    13f4:	10bfffcc 	andi	r2,r2,65535
    13f8:	9885883a 	add	r2,r19,r2
		*dato2 = cambiar_numero(unidades);
    13fc:	10800007 	ldb	r2,0(r2)
    1400:	8880000d 	sth	r2,0(r17)
	}
}
    1404:	dfc00417 	ldw	ra,16(sp)
    1408:	dcc00317 	ldw	r19,12(sp)
    140c:	dc800217 	ldw	r18,8(sp)
    1410:	dc400117 	ldw	r17,4(sp)
    1414:	dc000017 	ldw	r16,0(sp)
    1418:	dec00504 	addi	sp,sp,20
    141c:	f800283a 	ret

00001420 <cambiar_numero>:


int cambiar_numero(int entrada){
    1420:	00800244 	movi	r2,9
    1424:	11000536 	bltu	r2,r4,143c <cambiar_numero+0x1c>
    1428:	00800034 	movhi	r2,0
    142c:	10868a04 	addi	r2,r2,6696
    1430:	1109883a 	add	r4,r2,r4
    1434:	20800007 	ldb	r2,0(r4)
    1438:	f800283a 	ret
    143c:	0005883a 	mov	r2,zero
		salida = 0;
		break;
	}
	return salida;

}
    1440:	f800283a 	ret

00001444 <init_timer_interrupt>:


void init_timer_interrupt(void){
    1444:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)timer_isr, NULL, 0x0);
    1448:	01800034 	movhi	r6,0
    144c:	d8000015 	stw	zero,0(sp)
    1450:	000f883a 	mov	r7,zero
    1454:	31846f04 	addi	r6,r6,4540
    1458:	01400044 	movi	r5,1
    145c:	0009883a 	mov	r4,zero
	return salida;

}


void init_timer_interrupt(void){
    1460:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)timer_isr, NULL, 0x0);
    1464:	00016f80 	call	16f8 <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    1468:	008c0104 	movi	r2,12292
    146c:	00c001c4 	movi	r3,7
    1470:	10c00035 	stwio	r3,0(r2)
			ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
			ALTERA_AVALON_TIMER_CONTROL_START_MSK |
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	dec00204 	addi	sp,sp,8
    147c:	f800283a 	ret

00001480 <main>:
short min = 0;
unsigned short ultimo_estado_btnhora = 0xFF;
unsigned short ultimo_estado_btnmin = 0xFF;
unsigned short ultimo_estado_swinicio = 0xFF;

int main(void){
    1480:	defffc04 	addi	sp,sp,-16
    1484:	dfc00315 	stw	ra,12(sp)
    1488:	dc800215 	stw	r18,8(sp)
    148c:	dc400115 	stw	r17,4(sp)
    1490:	dc000015 	stw	r16,0(sp)


	init_timer_interrupt();
    1494:	00014440 	call	1444 <init_timer_interrupt>
	*hora1 = cambiar_numero(0);
    1498:	d0e00b17 	ldw	r3,-32724(gp)
    149c:	00801004 	movi	r2,64
    14a0:	1880000d 	sth	r2,0(r3)
	*hora2 = cambiar_numero(0);
    14a4:	d0e00a17 	ldw	r3,-32728(gp)
    14a8:	1880000d 	sth	r2,0(r3)
	*min1 = cambiar_numero(0);
    14ac:	d0e00917 	ldw	r3,-32732(gp)
    14b0:	1880000d 	sth	r2,0(r3)
	*min2 = cambiar_numero(0);
    14b4:	d0e00817 	ldw	r3,-32736(gp)
    14b8:	1880000d 	sth	r2,0(r3)
	while(1)
	{
		unsigned short estado_actual_btnhora = *btnhora;
    14bc:	d0a00717 	ldw	r2,-32740(gp)
    14c0:	1480000b 	ldhu	r18,0(r2)
		unsigned short estado_actual_btnmin = *btnmin;
    14c4:	d0a00617 	ldw	r2,-32744(gp)
    14c8:	1440000b 	ldhu	r17,0(r2)
		unsigned short estado_actual_swinicio = *swinicio;
    14cc:	d0a00217 	ldw	r2,-32760(gp)
    14d0:	1400000b 	ldhu	r16,0(r2)
		//*hora1 = 48;
		if((ultimo_estado_btnhora & 0x01) && (estado_actual_btnhora == 0x00)){
    14d4:	d0a0010b 	ldhu	r2,-32764(gp)
    14d8:	1080004c 	andi	r2,r2,1
    14dc:	10000626 	beq	r2,zero,14f8 <main+0x78>
    14e0:	90bfffcc 	andi	r2,r18,65535
    14e4:	1000041e 	bne	r2,zero,14f8 <main+0x78>
			sumar_dato(&hora, hora1, hora2);
    14e8:	d1a00a17 	ldw	r6,-32728(gp)
    14ec:	d1600b17 	ldw	r5,-32724(gp)
    14f0:	d1201c84 	addi	r4,gp,-32654
    14f4:	00013880 	call	1388 <sumar_dato>
		}

		if((ultimo_estado_btnmin & 0x01) && (estado_actual_btnmin == 0x00)){
    14f8:	d0a0008b 	ldhu	r2,-32766(gp)
    14fc:	1080004c 	andi	r2,r2,1
    1500:	10000626 	beq	r2,zero,151c <main+0x9c>
    1504:	88bfffcc 	andi	r2,r17,65535
    1508:	1000041e 	bne	r2,zero,151c <main+0x9c>
			sumar_dato(&min, min1, min2);
    150c:	d1a00817 	ldw	r6,-32736(gp)
    1510:	d1600917 	ldw	r5,-32732(gp)
    1514:	d1201c04 	addi	r4,gp,-32656
    1518:	00013880 	call	1388 <sumar_dato>
		}

		if((ultimo_estado_swinicio & 0x01) && (estado_actual_swinicio == 0x00)){
    151c:	d0a0000b 	ldhu	r2,-32768(gp)
    1520:	1080004c 	andi	r2,r2,1
    1524:	10000326 	beq	r2,zero,1534 <main+0xb4>
    1528:	80bfffcc 	andi	r2,r16,65535
    152c:	1000011e 	bne	r2,zero,1534 <main+0xb4>
			inicio_reloj();
    1530:	00013180 	call	1318 <inicio_reloj>
		}


		ultimo_estado_btnhora = estado_actual_btnhora;
    1534:	d4a0010d 	sth	r18,-32764(gp)
		ultimo_estado_btnmin = estado_actual_btnmin;
    1538:	d460008d 	sth	r17,-32766(gp)
		ultimo_estado_swinicio = estado_actual_swinicio;
    153c:	d420000d 	sth	r16,-32768(gp)
	}
    1540:	003fde06 	br	14bc <_gp+0xffff7a88>

00001544 <__divsi3>:
    1544:	20001b16 	blt	r4,zero,15b4 <__divsi3+0x70>
    1548:	000f883a 	mov	r7,zero
    154c:	28001616 	blt	r5,zero,15a8 <__divsi3+0x64>
    1550:	200d883a 	mov	r6,r4
    1554:	29001a2e 	bgeu	r5,r4,15c0 <__divsi3+0x7c>
    1558:	00800804 	movi	r2,32
    155c:	00c00044 	movi	r3,1
    1560:	00000106 	br	1568 <__divsi3+0x24>
    1564:	10000d26 	beq	r2,zero,159c <__divsi3+0x58>
    1568:	294b883a 	add	r5,r5,r5
    156c:	10bfffc4 	addi	r2,r2,-1
    1570:	18c7883a 	add	r3,r3,r3
    1574:	293ffb36 	bltu	r5,r4,1564 <_gp+0xffff7b30>
    1578:	0005883a 	mov	r2,zero
    157c:	18000726 	beq	r3,zero,159c <__divsi3+0x58>
    1580:	0005883a 	mov	r2,zero
    1584:	31400236 	bltu	r6,r5,1590 <__divsi3+0x4c>
    1588:	314dc83a 	sub	r6,r6,r5
    158c:	10c4b03a 	or	r2,r2,r3
    1590:	1806d07a 	srli	r3,r3,1
    1594:	280ad07a 	srli	r5,r5,1
    1598:	183ffa1e 	bne	r3,zero,1584 <_gp+0xffff7b50>
    159c:	38000126 	beq	r7,zero,15a4 <__divsi3+0x60>
    15a0:	0085c83a 	sub	r2,zero,r2
    15a4:	f800283a 	ret
    15a8:	014bc83a 	sub	r5,zero,r5
    15ac:	39c0005c 	xori	r7,r7,1
    15b0:	003fe706 	br	1550 <_gp+0xffff7b1c>
    15b4:	0109c83a 	sub	r4,zero,r4
    15b8:	01c00044 	movi	r7,1
    15bc:	003fe306 	br	154c <_gp+0xffff7b18>
    15c0:	00c00044 	movi	r3,1
    15c4:	003fee06 	br	1580 <_gp+0xffff7b4c>

000015c8 <__modsi3>:
    15c8:	20001716 	blt	r4,zero,1628 <__modsi3+0x60>
    15cc:	000f883a 	mov	r7,zero
    15d0:	2005883a 	mov	r2,r4
    15d4:	28001216 	blt	r5,zero,1620 <__modsi3+0x58>
    15d8:	2900162e 	bgeu	r5,r4,1634 <__modsi3+0x6c>
    15dc:	01800804 	movi	r6,32
    15e0:	00c00044 	movi	r3,1
    15e4:	00000106 	br	15ec <__modsi3+0x24>
    15e8:	30000a26 	beq	r6,zero,1614 <__modsi3+0x4c>
    15ec:	294b883a 	add	r5,r5,r5
    15f0:	31bfffc4 	addi	r6,r6,-1
    15f4:	18c7883a 	add	r3,r3,r3
    15f8:	293ffb36 	bltu	r5,r4,15e8 <_gp+0xffff7bb4>
    15fc:	18000526 	beq	r3,zero,1614 <__modsi3+0x4c>
    1600:	1806d07a 	srli	r3,r3,1
    1604:	11400136 	bltu	r2,r5,160c <__modsi3+0x44>
    1608:	1145c83a 	sub	r2,r2,r5
    160c:	280ad07a 	srli	r5,r5,1
    1610:	183ffb1e 	bne	r3,zero,1600 <_gp+0xffff7bcc>
    1614:	38000126 	beq	r7,zero,161c <__modsi3+0x54>
    1618:	0085c83a 	sub	r2,zero,r2
    161c:	f800283a 	ret
    1620:	014bc83a 	sub	r5,zero,r5
    1624:	003fec06 	br	15d8 <_gp+0xffff7ba4>
    1628:	0109c83a 	sub	r4,zero,r4
    162c:	01c00044 	movi	r7,1
    1630:	003fe706 	br	15d0 <_gp+0xffff7b9c>
    1634:	00c00044 	movi	r3,1
    1638:	003ff106 	br	1600 <_gp+0xffff7bcc>

0000163c <__udivsi3>:
    163c:	200d883a 	mov	r6,r4
    1640:	2900152e 	bgeu	r5,r4,1698 <__udivsi3+0x5c>
    1644:	28001416 	blt	r5,zero,1698 <__udivsi3+0x5c>
    1648:	00800804 	movi	r2,32
    164c:	00c00044 	movi	r3,1
    1650:	00000206 	br	165c <__udivsi3+0x20>
    1654:	10000e26 	beq	r2,zero,1690 <__udivsi3+0x54>
    1658:	28000516 	blt	r5,zero,1670 <__udivsi3+0x34>
    165c:	294b883a 	add	r5,r5,r5
    1660:	10bfffc4 	addi	r2,r2,-1
    1664:	18c7883a 	add	r3,r3,r3
    1668:	293ffa36 	bltu	r5,r4,1654 <_gp+0xffff7c20>
    166c:	18000826 	beq	r3,zero,1690 <__udivsi3+0x54>
    1670:	0005883a 	mov	r2,zero
    1674:	31400236 	bltu	r6,r5,1680 <__udivsi3+0x44>
    1678:	314dc83a 	sub	r6,r6,r5
    167c:	10c4b03a 	or	r2,r2,r3
    1680:	1806d07a 	srli	r3,r3,1
    1684:	280ad07a 	srli	r5,r5,1
    1688:	183ffa1e 	bne	r3,zero,1674 <_gp+0xffff7c40>
    168c:	f800283a 	ret
    1690:	0005883a 	mov	r2,zero
    1694:	f800283a 	ret
    1698:	00c00044 	movi	r3,1
    169c:	003ff406 	br	1670 <_gp+0xffff7c3c>

000016a0 <__umodsi3>:
    16a0:	2005883a 	mov	r2,r4
    16a4:	2900122e 	bgeu	r5,r4,16f0 <__umodsi3+0x50>
    16a8:	28001116 	blt	r5,zero,16f0 <__umodsi3+0x50>
    16ac:	01800804 	movi	r6,32
    16b0:	00c00044 	movi	r3,1
    16b4:	00000206 	br	16c0 <__umodsi3+0x20>
    16b8:	30000c26 	beq	r6,zero,16ec <__umodsi3+0x4c>
    16bc:	28000516 	blt	r5,zero,16d4 <__umodsi3+0x34>
    16c0:	294b883a 	add	r5,r5,r5
    16c4:	31bfffc4 	addi	r6,r6,-1
    16c8:	18c7883a 	add	r3,r3,r3
    16cc:	293ffa36 	bltu	r5,r4,16b8 <_gp+0xffff7c84>
    16d0:	18000626 	beq	r3,zero,16ec <__umodsi3+0x4c>
    16d4:	1806d07a 	srli	r3,r3,1
    16d8:	11400136 	bltu	r2,r5,16e0 <__umodsi3+0x40>
    16dc:	1145c83a 	sub	r2,r2,r5
    16e0:	280ad07a 	srli	r5,r5,1
    16e4:	183ffb1e 	bne	r3,zero,16d4 <_gp+0xffff7ca0>
    16e8:	f800283a 	ret
    16ec:	f800283a 	ret
    16f0:	00c00044 	movi	r3,1
    16f4:	003ff706 	br	16d4 <_gp+0xffff7ca0>

000016f8 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    16f8:	00017841 	jmpi	1784 <alt_iic_isr_register>

000016fc <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16fc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1700:	00bfff84 	movi	r2,-2
    1704:	2084703a 	and	r2,r4,r2
    1708:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    170c:	00c00044 	movi	r3,1
    1710:	d0a01d17 	ldw	r2,-32652(gp)
    1714:	194a983a 	sll	r5,r3,r5
    1718:	288ab03a 	or	r5,r5,r2
    171c:	d1601d15 	stw	r5,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1720:	d0a01d17 	ldw	r2,-32652(gp)
    1724:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1728:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    172c:	0005883a 	mov	r2,zero
    1730:	f800283a 	ret

00001734 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1734:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1738:	00bfff84 	movi	r2,-2
    173c:	2084703a 	and	r2,r4,r2
    1740:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1744:	00ffff84 	movi	r3,-2
    1748:	d0a01d17 	ldw	r2,-32652(gp)
    174c:	194a183a 	rol	r5,r3,r5
    1750:	288a703a 	and	r5,r5,r2
    1754:	d1601d15 	stw	r5,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1758:	d0a01d17 	ldw	r2,-32652(gp)
    175c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1760:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    1764:	0005883a 	mov	r2,zero
    1768:	f800283a 	ret

0000176c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    176c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1770:	00800044 	movi	r2,1
    1774:	1144983a 	sll	r2,r2,r5
    1778:	10c4703a 	and	r2,r2,r3
}
    177c:	1004c03a 	cmpne	r2,r2,zero
    1780:	f800283a 	ret

00001784 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1784:	00c007c4 	movi	r3,31
    1788:	19401616 	blt	r3,r5,17e4 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    178c:	defffe04 	addi	sp,sp,-8
    1790:	dfc00115 	stw	ra,4(sp)
    1794:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1798:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    179c:	00ffff84 	movi	r3,-2
    17a0:	80c6703a 	and	r3,r16,r3
    17a4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    17a8:	280490fa 	slli	r2,r5,3
    17ac:	00c00034 	movhi	r3,0
    17b0:	18c6af04 	addi	r3,r3,6844
    17b4:	1885883a 	add	r2,r3,r2
    17b8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    17bc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    17c0:	30000226 	beq	r6,zero,17cc <alt_iic_isr_register+0x48>
    17c4:	00016fc0 	call	16fc <alt_ic_irq_enable>
    17c8:	00000106 	br	17d0 <alt_iic_isr_register+0x4c>
    17cc:	00017340 	call	1734 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17d0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    17d4:	dfc00117 	ldw	ra,4(sp)
    17d8:	dc000017 	ldw	r16,0(sp)
    17dc:	dec00204 	addi	sp,sp,8
    17e0:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    17e4:	00bffa84 	movi	r2,-22
    17e8:	f800283a 	ret

000017ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    17ec:	deffff04 	addi	sp,sp,-4
    17f0:	01000034 	movhi	r4,0
    17f4:	01400034 	movhi	r5,0
    17f8:	dfc00015 	stw	ra,0(sp)
    17fc:	21068d04 	addi	r4,r4,6708
    1800:	29469b04 	addi	r5,r5,6764

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1804:	2140061e 	bne	r4,r5,1820 <alt_load+0x34>
    1808:	01000034 	movhi	r4,0
    180c:	01400034 	movhi	r5,0
    1810:	21040804 	addi	r4,r4,4128
    1814:	29440804 	addi	r5,r5,4128
    1818:	2140121e 	bne	r4,r5,1864 <alt_load+0x78>
    181c:	00000b06 	br	184c <alt_load+0x60>
    1820:	00c00034 	movhi	r3,0
    1824:	18c69b04 	addi	r3,r3,6764
    1828:	1907c83a 	sub	r3,r3,r4
    182c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1830:	10fff526 	beq	r2,r3,1808 <_gp+0xffff7dd4>
    {
      *to++ = *from++;
    1834:	114f883a 	add	r7,r2,r5
    1838:	39c00017 	ldw	r7,0(r7)
    183c:	110d883a 	add	r6,r2,r4
    1840:	10800104 	addi	r2,r2,4
    1844:	31c00015 	stw	r7,0(r6)
    1848:	003ff906 	br	1830 <_gp+0xffff7dfc>
    184c:	01000034 	movhi	r4,0
    1850:	01400034 	movhi	r5,0
    1854:	21068a04 	addi	r4,r4,6696
    1858:	29468a04 	addi	r5,r5,6696

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    185c:	2140101e 	bne	r4,r5,18a0 <alt_load+0xb4>
    1860:	00000b06 	br	1890 <alt_load+0xa4>
    1864:	00c00034 	movhi	r3,0
    1868:	18c46004 	addi	r3,r3,4480
    186c:	1907c83a 	sub	r3,r3,r4
    1870:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1874:	10fff526 	beq	r2,r3,184c <_gp+0xffff7e18>
    {
      *to++ = *from++;
    1878:	114f883a 	add	r7,r2,r5
    187c:	39c00017 	ldw	r7,0(r7)
    1880:	110d883a 	add	r6,r2,r4
    1884:	10800104 	addi	r2,r2,4
    1888:	31c00015 	stw	r7,0(r6)
    188c:	003ff906 	br	1874 <_gp+0xffff7e40>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1890:	00019880 	call	1988 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1894:	dfc00017 	ldw	ra,0(sp)
    1898:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    189c:	000198c1 	jmpi	198c <alt_icache_flush_all>
    18a0:	00c00034 	movhi	r3,0
    18a4:	18c68d04 	addi	r3,r3,6708
    18a8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    18ac:	0005883a 	mov	r2,zero
  {
    while( to != end )
    18b0:	18bff726 	beq	r3,r2,1890 <_gp+0xffff7e5c>
    {
      *to++ = *from++;
    18b4:	114f883a 	add	r7,r2,r5
    18b8:	39c00017 	ldw	r7,0(r7)
    18bc:	110d883a 	add	r6,r2,r4
    18c0:	10800104 	addi	r2,r2,4
    18c4:	31c00015 	stw	r7,0(r6)
    18c8:	003ff906 	br	18b0 <_gp+0xffff7e7c>

000018cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    18cc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    18d0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    18d4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    18d8:	00019300 	call	1930 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    18dc:	00019500 	call	1950 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    18e0:	d1a01e17 	ldw	r6,-32648(gp)
    18e4:	d1601f17 	ldw	r5,-32644(gp)
    18e8:	d1202017 	ldw	r4,-32640(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    18ec:	dfc00017 	ldw	ra,0(sp)
    18f0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    18f4:	00014801 	jmpi	1480 <main>

000018f8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    18f8:	defffe04 	addi	sp,sp,-8
    18fc:	dc000015 	stw	r16,0(sp)
    1900:	dfc00115 	stw	ra,4(sp)
    1904:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1908:	0001a0c0 	call	1a0c <strlen>
    190c:	01000034 	movhi	r4,0
    1910:	000f883a 	mov	r7,zero
    1914:	100d883a 	mov	r6,r2
    1918:	800b883a 	mov	r5,r16
    191c:	21069a04 	addi	r4,r4,6760
#else
    return fputs(str, stdout);
#endif
#endif
}
    1920:	dfc00117 	ldw	ra,4(sp)
    1924:	dc000017 	ldw	r16,0(sp)
    1928:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    192c:	00019541 	jmpi	1954 <altera_avalon_jtag_uart_write>

00001930 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1930:	deffff04 	addi	sp,sp,-4
    1934:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    1938:	0001a040 	call	1a04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    193c:	00800044 	movi	r2,1
    1940:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1944:	dfc00017 	ldw	ra,0(sp)
    1948:	dec00104 	addi	sp,sp,4
    194c:	f800283a 	ret

00001950 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1950:	f800283a 	ret

00001954 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1954:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1958:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    195c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1960:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1964:	2980072e 	bgeu	r5,r6,1984 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1968:	38c00037 	ldwio	r3,0(r7)
    196c:	18ffffec 	andhi	r3,r3,65535
    1970:	183ffc26 	beq	r3,zero,1964 <_gp+0xffff7f30>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1974:	28c00007 	ldb	r3,0(r5)
    1978:	20c00035 	stwio	r3,0(r4)
    197c:	29400044 	addi	r5,r5,1
    1980:	003ff806 	br	1964 <_gp+0xffff7f30>

  return count;
}
    1984:	f800283a 	ret

00001988 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1988:	f800283a 	ret

0000198c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    198c:	f800283a 	ret

00001990 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1990:	213ffe84 	addi	r4,r4,-6
    1994:	008003c4 	movi	r2,15
    1998:	11001636 	bltu	r2,r4,19f4 <alt_exception_cause_generated_bad_addr+0x64>
    199c:	200890ba 	slli	r4,r4,2
    19a0:	00800034 	movhi	r2,0
    19a4:	10866d04 	addi	r2,r2,6580
    19a8:	2089883a 	add	r4,r4,r2
    19ac:	20800017 	ldw	r2,0(r4)
    19b0:	1000683a 	jmp	r2
    19b4:	000019fc 	xorhi	zero,zero,103
    19b8:	000019fc 	xorhi	zero,zero,103
    19bc:	000019f4 	movhi	zero,103
    19c0:	000019f4 	movhi	zero,103
    19c4:	000019f4 	movhi	zero,103
    19c8:	000019fc 	xorhi	zero,zero,103
    19cc:	000019f4 	movhi	zero,103
    19d0:	000019f4 	movhi	zero,103
    19d4:	000019fc 	xorhi	zero,zero,103
    19d8:	000019fc 	xorhi	zero,zero,103
    19dc:	000019f4 	movhi	zero,103
    19e0:	000019fc 	xorhi	zero,zero,103
    19e4:	000019f4 	movhi	zero,103
    19e8:	000019f4 	movhi	zero,103
    19ec:	000019f4 	movhi	zero,103
    19f0:	000019fc 	xorhi	zero,zero,103
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    19f4:	0005883a 	mov	r2,zero
    19f8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    19fc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    1a00:	f800283a 	ret

00001a04 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1a04:	000170fa 	wrctl	ienable,zero
    1a08:	f800283a 	ret

00001a0c <strlen>:
    1a0c:	2005883a 	mov	r2,r4
    1a10:	10c00007 	ldb	r3,0(r2)
    1a14:	18000226 	beq	r3,zero,1a20 <strlen+0x14>
    1a18:	10800044 	addi	r2,r2,1
    1a1c:	003ffc06 	br	1a10 <_gp+0xffff7fdc>
    1a20:	1105c83a 	sub	r2,r2,r4
    1a24:	f800283a 	ret
