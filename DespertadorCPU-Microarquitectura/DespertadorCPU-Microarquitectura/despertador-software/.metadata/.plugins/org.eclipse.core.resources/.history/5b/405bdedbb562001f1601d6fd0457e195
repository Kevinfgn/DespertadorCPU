#include <stdio.h>
#include <system.h>
#include <sys/alt_irq.h>
#include <altera_avalon_timer_regs.h>
#include "sys/alt_stdio.h"

void init_timer_interrupt (void);
static void timer_isr (void * context, alt_u32 id);


volatile unsigned short * hora1= (short *) 0x30b0;
volatile unsigned short * hora2= (short *) 0x30a0;
volatile unsigned short * min1= (short *) 0x3090;
volatile unsigned short * min2= (short *) 0x3080;
volatile unsigned short * btnhora= (short *) 0x3070;
volatile unsigned short * btnmin= (short *) 0x3060;
volatile unsigned short * btnapagar= (short *) 0x3050;
volatile unsigned short * swmodo= (short *) 0x3040;
volatile unsigned short * buzzer= (short *) 0x3030;
volatile unsigned short * swinicio= (short *) 0x3020;

short hora = 0;
short min = 0;
unsigned short ultimo_estado_btnhora = 0xFF;
unsigned short ultimo_estado_btnmin = 0xFF;

int main(void){


	init_timer_interrupt();
	*hora1 = cambiar_numero(0);
	*hora2 = cambiar_numero(0);
	*min1 = cambiar_numero(0);
	*min2 = cambiar_numero(0);
	while(1)
	{
		unsigned short estado_actual_btnhora = *btnhora;
		unsigned short estado_actual_btnmin = *btnmin;
		//*hora1 = 48;
		if((ultimo_estado_btnhora & 0x01) && (estado_actual_btnhora == 0x00)){
			sumar_dato(&hora, hora1, hora2);
		}

		if((ultimo_estado_btnmin & 0x01) && (estado_actual_btnmin == 0x00)){
			sumar_dato(&min, min1, min2);
		}

		if(*swinicio == 0x00){
			alt_putstr("PSDFS");
		}


		ultimo_estado_btnhora = estado_actual_btnhora;
		ultimo_estado_btnmin = estado_actual_btnmin;
	}
	return 0;
}

void sumar_dato(unsigned short *valor, volatile unsigned short *dato1, volatile unsigned short *dato2){
	if(*valor <= 99){
		(*valor)++;
		unsigned short decenas = (*valor/10)%10;
		unsigned short unidades = *valor % 10;
		*dato1 = cambiar_numero(decenas);
		*dato2 = cambiar_numero(unidades);
	}
}


int cambiar_numero(int entrada){
	int salida = 0;
	switch(entrada){
	case 0:
		salida = 64;
		break;

	case 1:
		salida = 121;
		break;

	case 2:
			salida = 36;
			break;

	case 3:
			salida = 48;
			break;

	case 4:
			salida = 25;
			break;

	case 5:
			salida = 18;
			break;

	case 6:
			salida = 2;
			break;

	case 7:
			salida = 120;
			break;

	case 8:
			salida = 0;
			break;

	case 9:
			salida = 24;
			break;

	default:
		salida = 0;
		break;
	}
	return salida;

}


void init_timer_interrupt(void){
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (void *)timer_isr, NULL, 0x0);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
			ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
			ALTERA_AVALON_TIMER_CONTROL_START_MSK |
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}


static void timer_isr(void * context, alt_u32 id){
	int seg = 0;

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);

}


